       	       	     +-------------------------+
		     |		EE 415	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

황채영 <cyhwang97@kaist.ac.kr>
임승호 <limsh2017@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

[inode.c]
#define INDIRECT_BLOCK_ENTRIES 128
#define DIRECT_BLOCK_ENTRIES 123

enum direct_t
{
  NORMAL_DIRECT,
  INDIRECT,
  DOUBLE_INDIRECT,
  OUT_LIMIT,
};

struct sector_location
{
  int directness;
  off_t index1;
  off_t index2;
};

struct inode_indirect_block
{
  block_sector_t map_table[INDIRECT_BLOCK_ENTRIES];
};

struct inode_disk
{
  block_sector_t direct_map_table[DIRECT_BLOCK_ENTRIES];
  block_sector_t indirect_block_sec;
  block_sector_t double_indirect_block_sec;
};

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

direct block: 123 x 512B = 62,976B
indirect block: 128 x 512B = 65,536B
double indirect block: 128 x 128 x 512B 8,388,608B

total: 8,517,120B = 8.5MB


---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

Used a semaphore lock extend_lock.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

while writing to the file, it aqcuires a lock and updates the file length if the file length is increased.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

There is no priority when getting the lock, which makes it fair.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

It is a multilevel index. Efficient for both small and big files.
			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

[inode.c]
struct inode_disk
{
  int is_dir;
};

[thread.h]
struct thread
{
  struct dir *dir;
};

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

If the path_name starts with '/', it is an absolute directory. It starts from the root directory.
If it is not, it is a relative path, so it starts from the current directory.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

Checks whether the file with the same NAME exists or not, when doing filesys_remove and filesys_create.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

It prevents to open something when directory is removed by checking inode_removed(whether the inode is removed or not).

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

It is efficient and avoids race conditions.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

[buffercache.h]
struct buffer_head
{
  block_sector_t sector;
  bool dirty;
  bool is_used;
  bool clock_bit;
  void* data;
  struct lock buffer_lock;
}

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We used the clock algorithm to select victim to be replaced in the cache. It is implemented in bc_select_victim.

>> C3: Describe your implementation of write-behind.

When selecting victim, if the buffer's dirty is true, it flushes the entry to the disk.
Also, when shutting down the filesystem, it flushes all the entries in the cache to the disk.

>> C4: Describe your implementation of read-ahead.

We did not implement read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

A buffer_lock is used to avoid this kind of condition.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

A buffer_lock is used to avoid this kind of condition.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

buffer caching: efficient when read/writing to the same file continuously

read ahead: access file sequentially

write behind: doesn't have to access disk frequently


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
